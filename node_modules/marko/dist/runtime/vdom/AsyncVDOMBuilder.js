var EventEmitter = require("events-light");
var vdom = require("./vdom");
var VElement = vdom.be_;
var VDocumentFragment = vdom.bf_;
var VComment = vdom.bg_;
var VText = vdom.bh_;
var VComponent = vdom.bi_;
var VFragment = vdom.bj_;
var virtualizeHTML = vdom.bk_;
var RenderResult = require("../RenderResult");
var defaultDocument = vdom.bl_;
var morphdom = require("./morphdom");
var attrsHelper = require("./helpers/attrs");

var EVENT_UPDATE = "update";
var EVENT_FINISH = "finish";

function State(tree) {
  this.bm_ = new EventEmitter();
  this.bn_ = tree;
  this.bo_ = false;
}

function AsyncVDOMBuilder(globalData, parentNode, parentOut) {
  if (!parentNode) {
    parentNode = new VDocumentFragment();
  }

  var state;

  if (parentOut) {
    state = parentOut.N_;
  } else {
    state = new State(parentNode);
  }

  this.bp_ = 1;
  this.bq_ = 0;
  this.br_ = null;
  this.bs_ = parentOut;

  this.data = {};
  this.N_ = state;
  this.aG_ = parentNode;
  this.global = globalData || {};
  this.bt_ = [parentNode];
  this.bu_ = false;
  this.bv_ = undefined;
  this.h_ = null;

  this.m_ = null;
  this.o_ = null;
  this.aE_ = null;
}

var proto = AsyncVDOMBuilder.prototype = {
  aX_: true,
  _a_: defaultDocument,

  bc: function (component, key, ownerComponent) {
    var vComponent = new VComponent(component, key, ownerComponent);
    return this.bw_(vComponent, 0, true);
  },

  aH_: function (component, key, ownerComponent) {
    var vComponent = new VComponent(component, key, ownerComponent, true);
    this.bw_(vComponent, 0);
  },

  bw_: function (child, childCount, pushToStack) {
    this.aG_.bx_(child);
    if (pushToStack === true) {
      this.bt_.push(child);
      this.aG_ = child;
    }
    return childCount === 0 ? this : child;
  },

  element: function (tagName, attrs, key, component, childCount, flags, props) {
    var element = new VElement(tagName, attrs, key, component, childCount, flags, props);
    return this.bw_(element, childCount);
  },

  aV_: function (tagName, attrs, key, componentDef, props) {
    return this.element(tagName, attrsHelper(attrs), key, componentDef.n_, 0, 0, props);
  },

  n: function (node, component) {
    // NOTE: We do a shallow clone since we assume the node is being reused
    //       and a node can only have one parent node.
    var clone = node.__();
    this.node(clone);
    clone.aJ_ = component;

    return this;
  },

  node: function (node) {
    this.aG_.bx_(node);
    return this;
  },

  text: function (text, ownerComponent) {
    var type = typeof text;

    if (type != "string") {
      if (text == null) {
        return;
      } else if (type === "object") {
        if (text.toHTML) {
          return this.h(text.toHTML(), ownerComponent);
        }
      }

      text = text.toString();
    }

    this.aG_.bx_(new VText(text, ownerComponent));
    return this;
  },

  comment: function (comment, ownerComponent) {
    return this.node(new VComment(comment, ownerComponent));
  },

  html: function (html, ownerComponent) {
    if (html != null) {
      var vdomNode = virtualizeHTML(html, this._a_ || document, ownerComponent);
      this.node(vdomNode);
    }

    return this;
  },

  beginElement: function (tagName, attrs, key, component, childCount, flags, props) {
    var element = new VElement(tagName, attrs, key, component, childCount, flags, props);
    this.bw_(element, childCount, true);
    return this;
  },

  aT_: function (tagName, attrs, key, componentDef, props) {
    return this.beginElement(tagName, attrsHelper(attrs), key, componentDef.n_, 0, 0, props);
  },

  q_: function (key, component, preserve) {
    var fragment = new VFragment(key, component, preserve);
    this.bw_(fragment, null, true);
    return this;
  },

  r_: function () {
    this.endElement();
  },

  endElement: function () {
    var stack = this.bt_;
    stack.pop();
    this.aG_ = stack[stack.length - 1];
  },

  end: function () {
    this.aG_ = undefined;

    var remaining = --this.bp_;
    var parentOut = this.bs_;

    if (remaining === 0) {
      if (parentOut) {
        parentOut.by_();
      } else {
        this.bz_();
      }
    } else if (remaining - this.bq_ === 0) {
      this.bA_();
    }

    return this;
  },

  by_: function () {
    var remaining = --this.bp_;

    if (remaining === 0) {
      var parentOut = this.bs_;
      if (parentOut) {
        parentOut.by_();
      } else {
        this.bz_();
      }
    } else if (remaining - this.bq_ === 0) {
      this.bA_();
    }
  },

  bz_: function () {
    var state = this.N_;
    state.bo_ = true;
    state.bm_.emit(EVENT_FINISH, this.aY_());
  },

  bA_: function () {
    var lastArray = this._last;

    var i = 0;

    function next() {
      if (i === lastArray.length) {
        return;
      }
      var lastCallback = lastArray[i++];
      lastCallback(next);

      if (!lastCallback.length) {
        next();
      }
    }

    next();
  },

  error: function (e) {
    try {
      this.emit("error", e);
    } finally {
      // If there is no listener for the error event then it will
      // throw a new Error here. In order to ensure that the async fragment
      // is still properly ended we need to put the end() in a `finally`
      // block
      this.end();
    }

    return this;
  },

  beginAsync: function (options) {
    if (this.bu_) {
      throw Error("Tried to render async while in sync mode. Note: Client side await is not currently supported in re-renders (Issue: #942).");
    }

    var state = this.N_;

    if (options) {
      if (options.last) {
        this.bq_++;
      }
    }

    this.bp_++;

    var documentFragment = this.aG_.bB_();
    var asyncOut = new AsyncVDOMBuilder(this.global, documentFragment, this);

    state.bm_.emit("beginAsync", {
      out: asyncOut,
      parentOut: this
    });

    return asyncOut;
  },

  createOut: function () {
    return new AsyncVDOMBuilder(this.global);
  },

  flush: function () {
    var events = this.N_.bm_;

    if (events.listenerCount(EVENT_UPDATE)) {
      events.emit(EVENT_UPDATE, new RenderResult(this));
    }
  },

  F_: function () {
    return this.N_.bn_;
  },

  aY_: function () {
    return this.bC_ || (this.bC_ = new RenderResult(this));
  },

  on: function (event, callback) {
    var state = this.N_;

    if (event === EVENT_FINISH && state.bo_) {
      callback(this.aY_());
    } else if (event === "last") {
      this.onLast(callback);
    } else {
      state.bm_.on(event, callback);
    }

    return this;
  },

  once: function (event, callback) {
    var state = this.N_;

    if (event === EVENT_FINISH && state.bo_) {
      callback(this.aY_());
    } else if (event === "last") {
      this.onLast(callback);
    } else {
      state.bm_.once(event, callback);
    }

    return this;
  },

  emit: function (type, arg) {
    var events = this.N_.bm_;
    switch (arguments.length) {
      case 1:
        events.emit(type);
        break;
      case 2:
        events.emit(type, arg);
        break;
      default:
        events.emit.apply(events, arguments);
        break;
    }
    return this;
  },

  removeListener: function () {
    var events = this.N_.bm_;
    events.removeListener.apply(events, arguments);
    return this;
  },

  sync: function () {
    this.bu_ = true;
  },

  isSync: function () {
    return this.bu_;
  },

  onLast: function (callback) {
    var lastArray = this._last;

    if (lastArray === undefined) {
      this._last = [callback];
    } else {
      lastArray.push(callback);
    }

    return this;
  },

  E_: function (doc) {
    var node = this.bv_;
    if (!node) {
      var vdomTree = this.F_();
      // Create the root document fragment node
      doc = doc || this._a_ || document;
      this.bv_ = node = vdomTree.bD_(doc, null);
      morphdom(node, vdomTree, doc, this.h_);
    }
    return node;
  },

  toString: function (doc) {
    var docFragment = this.E_(doc);
    var html = "";

    var child = docFragment.firstChild;
    while (child) {
      var nextSibling = child.nextSibling;
      if (child.nodeType != 1) {
        var container = docFragment.ownerDocument.createElement("div");
        container.appendChild(child.cloneNode());
        html += container.innerHTML;
      } else {
        html += child.outerHTML;
      }

      child = nextSibling;
    }

    return html;
  },

  then: function (fn, fnErr) {
    var out = this;
    var promise = new Promise(function (resolve, reject) {
      out.on("error", reject).on(EVENT_FINISH, function (result) {
        resolve(result);
      });
    });

    return Promise.resolve(promise).then(fn, fnErr);
  },

  catch: function (fnErr) {
    return this.then(undefined, fnErr);
  },

  isVDOM: true,

  c: function (componentDef, key, customEvents) {
    this.m_ = componentDef;
    this.o_ = key;
    this.aE_ = customEvents;
  }
};

proto.e = proto.element;
proto.be = proto.beginElement;
proto.ee = proto.aU_ = proto.endElement;
proto.t = proto.text;
proto.h = proto.w = proto.write = proto.html;

module.exports = AsyncVDOMBuilder;