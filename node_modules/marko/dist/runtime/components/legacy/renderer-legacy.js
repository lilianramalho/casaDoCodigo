var getComponentsContext = require("../ComponentsContext").s_;
var componentsUtil = require("../util");
var componentLookup = componentsUtil.G_;
var registry = require("../registry");
var modernRenderer = require("../renderer");
var resolveComponentKey = modernRenderer.as_;
var trackAsyncComponents = modernRenderer.aD_;
var beginComponent = require("../beginComponent");
var endComponent = require("../endComponent");
var complain;

function createRendererFunc(templateRenderFunc, componentProps) {
  var typeName = componentProps.e_;
  //var assignedId = componentProps.id;
  var isSplit = componentProps.c_ === true;

  return function renderer(input, out, assignedId, renderingLogic) {
    trackAsyncComponents(out);

    var widgetBody = input.renderBody;
    var widgetState = input.widgetState;
    var widgetConfig = input.widgetConfig;

    var componentsContext = getComponentsContext(out);
    var globalComponentsContext = componentsContext.k_;

    var component = globalComponentsContext._t_;

    var isRerender = component !== undefined;
    var id = assignedId;
    var isExisting;
    var parentComponentDef = componentsContext._O_;
    var ownerComponentDef = out.m_;
    var ownerComponentId = ownerComponentDef && ownerComponentDef.id;
    var key = out.o_;
    var customEvents = out.aE_;

    out.m_ = null;

    if (component) {
      id = component.id;
      isExisting = true;
      globalComponentsContext._t_ = null;
    } else {
      if (key != null) {
        id = id || resolveComponentKey(key.toString(), parentComponentDef);
      } else if (parentComponentDef) {
        id = parentComponentDef._K_();
      } else {
        id = globalComponentsContext._K_();
      }
    }

    if (registry.aF_ && typeName) {
      if (renderingLogic) delete renderingLogic.onRender;
      component = registry._M_(renderingLogic, id, input, out, typeName, customEvents, ownerComponentId);
      if (isSplit || widgetState) {
        component.input = null;
      } else if (input.widgetProps) {
        component.input = input.widgetProps;
        // eslint-disable-next-line no-constant-condition
      }
    } else {
      if (!component) {
        if (isRerender) {
          // Look in in the DOM to see if a component with the same ID and type already exists.
          component = componentLookup[id];
          if (component && component.e_ !== typeName) {
            component = undefined;
          }
        }

        if (component) {
          isExisting = true;
        } else {
          isExisting = false;
          // We need to create a new instance of the component
          if (typeName) {
            component = registry._M_(typeName, id);
          }
        }
      }
    }

    var isFakeComponent = false;

    if (!component) {
      isFakeComponent = true;
      component = {
        id: id,
        p_: {}
      };
    } else {
      component.Y_ = true;
    }

    component.state = widgetState;
    component.widgetConfig = widgetConfig;
    component._N_ = widgetBody || component._N_;

    var componentDef = beginComponent(componentsContext, component, key, ownerComponentDef, isSplit, isFakeComponent);
    var parentLegacyComponentDef = componentsContext.aC_;
    componentsContext.aC_ = componentDef;

    // This is a hack, but we have to swap out the component instance stored with this node
    var vComponentNode = out.aG_;

    componentDef.n_ = isFakeComponent ? null : component;
    componentDef._E_ = isExisting;
    componentDef.al_ = true;

    componentDef.t = function (typeName) {
      if (typeName) {
        if (registry.aF_) {
          var oldComponent = component;
          if (renderingLogic) delete renderingLogic.onRender;
          component = registry._M_(renderingLogic || {}, id, input, out, typeName, customEvents, ownerComponentId);
          if (isSplit || widgetState) {
            component.input = null;
          } else if (input.widgetProps) {
            component.input = input.widgetProps;
            // eslint-disable-next-line no-constant-condition
          }
          Object.assign(component, oldComponent);
          beginComponent(componentsContext, component, key, ownerComponentDef, isSplit, false, this);
        } else {
          vComponentNode.n_ = component = registry._M_(typeName, component.id);
        }
        this.n_ = component;
      }
    };

    if (!isFakeComponent && !registry.aF_) {
      component.H_("ay_");
    }

    // Render the template associated with the component using the final template
    // data that we constructed
    templateRenderFunc(input, out, componentDef, componentDef, component);

    if (customEvents && componentDef.n_) {
      if (registry.aF_) {
        componentDef.S_ = customEvents;
        componentDef.L_ = ownerComponentId;
      } else {
        componentDef.n_._x_(customEvents, ownerComponentId);
      }
    }

    endComponent(out, componentDef);
    componentsContext._O_ = parentComponentDef;
    componentsContext.aC_ = parentLegacyComponentDef;
  };
}

module.exports = createRendererFunc;